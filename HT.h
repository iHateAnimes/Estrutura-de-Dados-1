#include "AVL.h"
//--------------------------------------------------------------------------------------------------------
//Definição da estrutura Hash Table
//--------------------------------------------------------------------------------------------------------
typedef struct _hash{
    AVLNode *root;
    int size;
}HT;
//--------------------------------------------------------------------------------------------------------
//Definição do tamanho da Hash Table
//--------------------------------------------------------------------------------------------------------
#define TAM 401
//--------------------------------------------------------------------------------------------------------
//Função que define em que posição a palavra será inserida
//--------------------------------------------------------------------------------------------------------
int posWord(char* word){
    return wordValue(word)%TAM;
}
//--------------------------------------------------------------------------------------------------------
//FUnção que busca um elemento na HashTable e retorna um ponteiro para o elemento
//--------------------------------------------------------------------------------------------------------
AVLNode* searchHT(HT vet[],char* word){
    return searchAVL(vet[posWord(word)].root,word);
}
//--------------------------------------------------------------------------------------------------------
//Função que insere um elemento na Hash Table
//--------------------------------------------------------------------------------------------------------
int insertHT(HT vet[],char* word){
    if(searchHT(vet,word)!=NULL) return 0;
    int pos = posWord(word);
    vet[pos].root = insertAVL(vet[posWord(word)].root,word);
    vet[pos].size ++;
    return 1;
}
//--------------------------------------------------------------------------------------------------------
//Função que Deleta um elemento da HashTable
//--------------------------------------------------------------------------------------------------------
int deleteHT(HT vet[],char* word){
    if(searchHT(vet,word)==NULL) return 0;
    int pos = posWord(word);
    vet[pos].root = deleteAVL(vet[posWord(word)].root,word);
    vet[pos].size --;
    return 1;
}
//--------------------------------------------------------------------------------------------------------
//Função que Imprime todos elementos da Hash Table
//--------------------------------------------------------------------------------------------------------
void printHT(HT vet[]){
    int i;
    for(i=0;i<TAM;i++){
        printf("Posição %d:\n",i);
        PrintLevel(vet[i].root);
        printf("\n");
    }
}
//--------------------------------------------------------------------------------------------------------
//Função que caucula a quantidade de elementos em uma posição da Hash Table
//--------------------------------------------------------------------------------------------------------
int posWeightHT(HT vet[],int i){
    return vet[i].size;
}
//--------------------------------------------------------------------------------------------------------
//Função que caucula a quantidade de elementos da Hash Table
//--------------------------------------------------------------------------------------------------------
int weightHT(HT vet[]){
    int total = 0;
    for(int i=0;i<TAM;i++) total+=posWeightHT(vet,i);
    return total;
}
//--------------------------------------------------------------------------------------------------------
//Função que Imprime apenas uma posição da Hash Table
//--------------------------------------------------------------------------------------------------------
void printPos(HT vet[],int pos){
    printf("\nPosição %d: ",pos);
    PrintLevel(vet[pos].root);
}
//--------------------------------------------------------------------------------------------------------
//Função que destroi uma Hash Table
//--------------------------------------------------------------------------------------------------------
void destroyHT(HT vet[]){
    for(int i =0;i<TAM;i++){
        destroyAVL(vet[i].root);
        vet[i].root = NULL;
    }
}
//--------------------------------------------------------------------------------------------------------
//Função que destroi uma posição da Hash Table
//--------------------------------------------------------------------------------------------------------
void posDestroyHT(HT vet[],int i){
    destroyAVL(vet[i].root);
    vet[i].root = NULL;
}
//--------------------------------------------------------------------------------------------------------
